typedef unsigned char BYTE;
typedef enum { USE_OFF = 0, USE_ON = 1, USE_SET = 2, USE_TOGGLE = 3 } USE_TYPE;

typedef enum {
	NO_SVC = 0, SVC_NOP, SVC_DISCONNECT, SVC_EVENT, SVC_VERSION, SVC_SETVIEW, SVC_SOUND, SVC_TIME, SVC_PRINT,
	SVC_STUFFTEXT, SVC_SETANGLE, SVC_SERVERINFO, SVC_LIGHTSTYLE, SVC_UPDATEUSERINFO, SVC_DELTADESCRIPTION, SVC_CLIENTDATA, SVC_STOPSOUND,
	SVC_PINGS, SVC_PARTICLE, SVC_DAMAGE, SVC_SPAWNSTATIC, SVC_EVENT_RELIABLE, SVC_SPAWNBASELINE, SVC_TEMPENTITY, SVC_SETPAUSE,
	SVC_SIGNONNUM, SVC_CENTERPRINT, SVC_KILLEDMONSTER, SVC_FOUNDSECRET, SVC_SPAWNSTATICSOUND, SVC_INTERMISSION, SVC_FINALE, SVC_CDTRACK,
	SVC_RESTORE, SVC_CUTSCENE, SVC_WEAPONANIM, SVC_DECALNAME, SVC_ROOMTYPE, SVC_ADDANGLE, SVC_NEWUSERMSG, SVC_PACKETENTITIES,
	SVC_DELTAPACKETENTITIES, SVC_CHOKE, SVC_RESOURCELIST, SVC_NEWMOVEVARS, SVC_RESOURCEREQUEST, SVC_CUSTOMIZATION, SVC_CROSSHAIRANGLE, SVC_SOUNDFADE,
	SVC_FILETXFERFAILED, SVC_HLTV, SVC_DIRECTOR, SVC_VOICEINIT, SVC_VOICEDATA, SVC_SENDEXTRAINFO, SVC_TIMESCALE
} SVC_LIST;

typedef enum { MSG_BROADCAST = 0, MSG_ONE, MSG_ALL, MSG_INIT, MSG_PVS, MSG_PAS, MSG_PVS_R, MSG_PAS_R, MSG_ONE_UNRELIABLE, MSG_SPEC } MSG_DEST;

typedef enum {
    MONSTERSTATE_NONE = 0,
    MONSTERSTATE_IDLE,
    MONSTERSTATE_COMBAT,
    MONSTERSTATE_ALERT,
    MONSTERSTATE_HUNT,
    MONSTERSTATE_PRONE,
    MONSTERSTATE_SCRIPT,
    MONSTERSTATE_PLAYDEAD,
    MONSTERSTATE_DEAD
} MONSTERSTATE;

typedef enum {
    TS_AT_TOP,
    TS_AT_BOTTOM,
    TS_GOING_UP,
    TS_GOING_DOWN
} TOGGLE_STATE;

typedef enum {
	FL_FLY = (1<<0),
	FL_SWIM = (1<<1),
	FL_CONVEYOR = (1<<2),
	FL_CLIENT = (1<<3),
	FL_INWATER = (1<<4),
	FL_MONSTER = (1<<5),
	FL_GODMODE = (1<<6),
	FL_NOTARGET = (1<<7),
	FL_SKIPLOCALHOST = (1<<8),
	FL_ONGROUND = (1<<9),
	FL_PARTIALGROUND = (1<<10),
	FL_WATERJUMP = (1<<11),
	FL_FROZEN = (1<<12),
	FL_FAKECLIENT = (1<<13),
	FL_DUCKING = (1<<14),
	FL_FLOAT = (1<<15),
	FL_GRAPHED = (1<<16),
	FL_IMMUNE_WATER = (1<<17),
	FL_IMMUNE_SLIME = (1<<18),
	FL_IMMUNE_LAVA = (1<<19),
	FL_PROXY = (1<<20),
	FL_ALWAYSTHINK = (1<<21),
	FL_BASEVELOCITY = (1<<22),
	FL_MONSTERCLIP = (1<<23),
	FL_ONTRAIN = (1<<24),
	FL_WORLDBRUSH = (1<<25),
	FL_SPECTATOR = (1<<26),
	FL_CUSTOMENTITY = (1<<29),
	FL_KILLME = (1<<30),
	FL_DORMANT = (1<<31)
} PEV_FLAGS;

typedef enum {
	ACT_RESET,
	ACT_IDLE,
	ACT_GUARD,
	ACT_WALK,
	ACT_RUN,
	ACT_FLY,
	ACT_SWIM,
	ACT_HOP,
	ACT_LEAP,
	ACT_FALL,
	ACT_LAND,
	ACT_STRAFE_LEFT,
	ACT_STRAFE_RIGHT,
	ACT_ROLL_LEFT,
	ACT_ROLL_RIGHT,
	ACT_TURN_LEFT,
	ACT_TURN_RIGHT,
	ACT_CROUCH,
	ACT_CROUCHIDLE,
	ACT_STAND,
	ACT_USE,
	ACT_SIGNAL1,
	ACT_SIGNAL2,
	ACT_SIGNAL3,
	ACT_TWITCH,
	ACT_COWER,
	ACT_SMALL_FLINCH,
	ACT_BIG_FLINCH,
	ACT_RANGE_ATTACK1,
	ACT_RANGE_ATTACK2,
	ACT_MELEE_ATTACK1,
	ACT_MELEE_ATTACK2,
	ACT_RELOAD,
	ACT_ARM,
	ACT_DISARM,
	ACT_EAT,
	ACT_DIESIMPLE,
	ACT_DIEBACKWARD,
	ACT_DIEFORWARD,
	ACT_DIEVIOLENT,
	ACT_BARNACLE_HIT,
	ACT_BARNACLE_PULL,
	ACT_BARNACLE_CHOMP,
	ACT_BARNACLE_CHEW,
	ACT_SLEEP,
	ACT_INSPECT_FLOOR,
	ACT_INSPECT_WALL,
	ACT_IDLE_ANGRY,
	ACT_WALK_HURT,
	ACT_RUN_HURT,
	ACT_HOVER,
	ACT_GLIDE,
	ACT_FLY_LEFT,
	ACT_FLY_RIGHT,
	ACT_DETECT_SCENT,
	ACT_SNIFF,
	ACT_BITE,
	ACT_THREAT_DISPLAY,
	ACT_FEAR_DISPLAY,
	ACT_EXCITED,
	ACT_SPECIAL_ATTACK1,
	ACT_SPECIAL_ATTACK2,
	ACT_COMBAT_IDLE,
	ACT_WALK_SCARED,
	ACT_RUN_SCARED,
	ACT_VICTORY_DANCE,
	ACT_DIE_HEADSHOT,
	ACT_DIE_CHESTSHOT,
	ACT_DIE_GUTSHOT,
	ACT_DIE_BACKSHOT,
	ACT_FLINCH_HEAD,
	ACT_FLINCH_CHEST,
	ACT_FLINCH_STOMACH,
	ACT_FLINCH_LEFTARM,
	ACT_FLINCH_RIGHTARM,
	ACT_FLINCH_LEFTLEG,
	ACT_FLINCH_RIGHTLEG,
	ACT_FLINCH,
	ACT_LARGE_FLINCH,
	ACT_HOLDBOMB,
	ACT_IDLE_FIDGET,
	ACT_IDLE_SCARED,
	ACT_IDLE_SCARED_FIDGET,
	ACT_FOLLOW_IDLE,
	ACT_FOLLOW_IDLE_FIDGET,
	ACT_FOLLOW_IDLE_SCARED,
	ACT_FOLLOW_IDLE_SCARED_FIDGET,
	ACT_CROUCH_IDLE,
	ACT_CROUCH_IDLE_FIDGET,
	ACT_CROUCH_IDLE_SCARED,
	ACT_CROUCH_IDLE_SCARED_FIDGET,
	ACT_CROUCH_WALK,
	ACT_CROUCH_WALK_SCARED,
	ACT_CROUCH_DIE,
	ACT_WALK_BACK,
	ACT_IDLE_SNEAKY,
	ACT_IDLE_SNEAKY_FIDGET,
	ACT_WALK_SNEAKY,
	ACT_WAVE,
	ACT_YES,
	ACT_NO
} Activity;

typedef struct {
	int type;
	char *name;
} activity_map_t;
